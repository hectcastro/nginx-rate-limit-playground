# Check if `Authorization` header is set. If it is,
# set `limit_header` to 1; otherwise 0.
map $http_authorization $limit_header {
    default 0;
    "~.+" 1;
}

# Check if `token` query string parameter is set.
# If it is, set `limit_arg` to 1; otherwise 0.
map $arg_token $limit_arg {
    default 0;
    "~.+" 1;
}

# Check code produced by concatenation of `limit_header`
# and `limit_arg`. If it starts with a 1, use the value in
# `http_authorization`; if it is 01, use the value in
# `arg_token`; otherwise use `remote_addr`.
map $limit_header$limit_arg $limit_key {
    # Ensure that `real_ip_header` is used to set `remote_addr`
    # so that the client IP is used vs. an intermediate load
    # balancer or proxy IP.
    default $remote_addr;
    "~1." $http_authorization;
    "01" $arg_token;
}

# Limit requests to this zone to 1 per minute.
limit_req_zone $limit_key zone=all_req:10m rate=1r/m;
# Override HTTP status code used to signal rate-limiting.
limit_req_status 429;

log_format rl '$remote_addr - $remote_user [$time_local] "$request" '
              '$status $body_bytes_sent "$http_referer" '
              '"$http_user_agent" "$http_x_forwarded_for" '
              '$limit_key';

server {
    listen       80;
    server_name  localhost;

    access_log  /var/log/nginx/access.log rl;

    location / {
        # Limit requests to 1 per minute, with an additional
        # overflow burst of 1 (after the second request within
        # the rate succeeds, all else will be rate-limited).
        limit_req zone=all_req burst=1 nodelay;

        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}
